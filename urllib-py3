# -*- coding: UTF-8 -*-
import urllib
import json
import ssl
import  sys
from imp import reload

if sys.getdefaultencoding()!='utf-8':
    reload(sys)
    sys.setdefaultencoding('utf-8')

class JSONObject:
    def __init__(self,d):
        self.__dict__=d

class HttpORsUrl(object):
    # httpors为使用协议例如https或者http
    # host为主机ip或域名
    # port为端口
    # api为接口路由
    # header为请求头为数组套json格式[{'Content-Type': 'application/json'}]
    # values为请求体为json格式{'msgtype': 'text','text': {'content': '大佬，订午餐啦', 'mentioned_list': ['@all']}}
    @staticmethod
    def http_post(httpors,host,port,api,header,values):
        url = httpors + '://' + host + ':' + port + api
        if port=='':
            url = httpors + '://' + host  + api
        print ("POST url={url}".format(url=url))
        context=ssl._create_unverified_context()
        print ("values={0}".format(values))
        jdata=json.dumps(values)
        print ("jdat={0}".format(jdata))
        req = urllib.request.Request(url,bytes(jdata,encoding='utf-8'))
        for i in header:
            headerkey = list(i.keys())[0]
            headervalue = list(i.values())[0]
            print ("headerkey={0},headervalue={1}".format(headerkey,headervalue))
        req.add_header(headerkey,headervalue)
        response = urllib.request.urlopen(req,context=context)
        resp = response.read()
        print (resp)
        respjson = json.loads(resp,object_hook=JSONObject)
        return respjson
    @staticmethod
    def http_get(httpors,host,port,api,header):
        url = httpors+'://'+host+':'+port+api
        if port=='':
            url = httpors + '://' + host  + api
        print ("GET url={url}".format(url=url))
        context=ssl._create_unverified_context()
        req = urllib.request.Request(url)
        for i in header:
            headerkey = list(i.keys())[0]
            headervalue = list(i.values())[0]
            print ("headerkey={0},headervalue={1}".format(headerkey, headervalue))
        req.add_header(headerkey, headervalue)
        response = urllib.request.urlopen(req,context=context)
        resp = response.read()
        print (resp)
        respjson = json.loads(resp, object_hook=JSONObject)
        return respjson
    @staticmethod
    def http_delete(httpors,host,port,api,header):
        url = httpors + '://' + host + ':' + port + api
        print ("GET url={url}".format(url=url))
        ssl._create_default_https_context = ssl.__create_unverified_context
        req = urllib.request.Request(url)
        req.get_method=lambda : 'DELETE'
        for i in header:
            headerkey = list(i.keys())[0]
            headervalue = list(i.values())[0]
            print ("headerkey={0},headervalue={1}".format(headerkey, headervalue))
        req.add_header(headerkey, headervalue)
        response = urllib.request.urlopen(req)
        resp = response.read()
        print (resp)
        respjson = json.loads(resp, object_hook=JSONObject)
        return respjson
